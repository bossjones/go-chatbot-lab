#!/usr/bin/env bash

set -e
# set -x

PROJECT=$(go list -f "{{.ImportPath}}");
# COVERAGE_MODE='mode: atomic'
COVERAGE_MODE='mode: set'
PACKAGES_TO_SKIP="mario"

# 79 mario
# 80 a link to the past
# 81 sonic
# 82 mario
# 83 mario
# 84 a link to the past

go tool vet -all config shared
DIRS="config/... shared/..." && FAILED="false" && \
echo "gofmt -l *.go config shared" && \
GOFMT=$(gofmt -l *.go config shared) && \
if [ ! -z "$GOFMT" ]; then echo -e "\nThe following files did not pass a 'go fmt' check:\n$GOFMT\n" && FAILED="true"; fi; \
for codeDir in $DIRS; do \
    echo "golint $codeDir" && \
    LINT="$(golint $codeDir)" && \
    if [ ! -z "$LINT" ]; then echo "$LINT" && FAILED="true"; fi; \
done && \
if [ "$FAILED" = "true" ]; then exit 1; else echo "ok" ;fi

# ******************************[OLD]***********************************************
# cd `dirname $0`
# go fmt ./...
# go vet ./...
# GINKGO="ginkgo -r --race --randomizeAllSpecs --failOnPending --skipMeasurements"
# export DROPSONDE_HEARTBEAT_INTERVAL_SECS=0.375
# $GINKGO -cover
# ******************************[OLD]***********************************************

# go test -race ./...
# go test -cover ./...

# source: https://medium.com/@durgaprasadbudhwani/golang-best-practices-behavior-driven-development-and-continuous-integration-53ed72c915a5
# go list -f '{{ .ImportPath }}'
echo "******* Ginkgo report coverprofile... *************";
echo "[info] Below snippet will collect coverage from different packages and generate package_name.coverprofile file.";
# *************************************************************************************
# ginkgo -r -cover -coverpkg=./... -trace -race
# ginkgo -r -cover -race
# ginkgo -tags daemon -r -p -race -cover -keepGoing -nodes=1 "$@"
# ginkgo -r -p -race -cover -keepGoing -nodes=4 "$@"
# ginkgo -r --race --randomizeAllSpecs --failOnPending --skipMeasurements
# ginkgo -r --race --randomizeAllSpecs --failOnPending --skipMeasurements -cover -trace
# *************************************************************************************

# SOURCE: https://onsi.github.io/ginkgo/
# NOTE: Ginkgo comes with a number of flags that you probably want to turn on when running in a Continuous Integration environment. The following is recommended:
# INFO: -r will recursively find and run all spec suites in the current directory
# INFO: --randomizeAllSpecs and --randomizeSuites will shuffle both the order in which specs within a suite run, and the order in which different suites run. This can be great for identifying test pollution. You can always rerun a given ordering later by passing the --seed flag a matching seed.
# INFO: --failOnPending causes the test suite to fail if there are any pending tests (typically these should not be committed but should signify work in progress).
# INFO: --cover generates .coverprofiles and coverage statistics for each test suite.
# INFO: --trace prints out a full stack trace when failures occur. This makes debugging based on CI logs easier.
# INFO: --race runs the tests with the race detector turned on.
# INFO: --progress emits test progress to the GinkgoWriter. Makes identifying where failures occur a little easier.
# ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --race --progress -skipPackage=github.com/modocache/gover/mario;
ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --race --progress -skipPackage=${PACKAGES_TO_SKIP};
echo "[info] To collect coverages from all packages, below code snippet has been used";
gover;
echo "[info] dump gover.coverprofile";
\cat gover.coverprofile;
echo "[info] Remove fixture data from gover repo, mario etc";
awk '/mario|sonic|link to the past/{n=6}; n {n--; next}; 1' < gover.coverprofile > gover2.coverprofile
mv -f gover2.coverprofile gover.coverprofile;
echo "[info] dump gover.coverprofile";
\cat gover.coverprofile;
echo "[info] Finally run goveralls";
# goveralls -coverprofile=gover.coverprofile -service=travis-ci;
