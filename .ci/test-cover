#!/usr/bin/env bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[38;5;220m'
NC='\033[0m' # No Color

_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
_BASE_DIR=$(dirname $_DIR)
_FORMAT=$1

function log {
  if [[ $1 = "FAIL" ]]; then
    printf "$RED[FAIL]$NC $2\n"
  elif [[ $1 = "WARN" && -z "$SILENT" ]]; then
    printf "$YELLOW[WARN]$NC $2\n"
  elif [[ $1 = "INFO" && -z "$SILENT" ]]; then
    printf "[INFO] $2\n"
  elif [[ $1 = "PASS" && -z "$SILENT" ]]; then
    printf "$GREEN[PASS]$NC $2\n"
  fi
}

cd $_BASE_DIR

if [[ "${_FORMAT}" == "xml" ]]; then
  echo "******* Go coveralls report xml... *************" && \
  gocov test $(go list ./... | grep -v /vendor/) | gocov-xml > coverage.xml
elif [[ "${_FORMAT}" == "html" ]]; then
  echo "******* Go coveralls report html... *************" && \
  gocov test $(go list ./... | grep -v /vendor/) | gocov-html > coverage.html
elif [[ "${_FORMAT}" == "coveralls" ]]; then
  # INFO: Go, multiple packages and coveralls.io
  # SOURCE: https://gist.github.com/rjeczalik/6f01430e8554bf59b88e
  echo "******* Go coveralls report coverprofile... *************" && \
  go list -f '{{if len .TestGoFiles}}"go test -coverprofile={{.Dir}}/.coverprofile {{.ImportPath}}"{{end}}' $(go list ./... | grep -v /vendor/ | grep -v mocks ) | xargs -L 1 sh -c;
  gover;
  goveralls -coverprofile=.coverprofile -service=travis-ci
elif [[ "${_FORMAT}" == "ginkgo" ]]; then
  # source: https://medium.com/@durgaprasadbudhwani/golang-best-practices-behavior-driven-development-and-continuous-integration-53ed72c915a5
  # go list -f '{{ .ImportPath }}'
  echo "******* Ginkgo report coverprofile... *************";
  echo "[info] Below snippet will collect coverage from different packages and generate package_name.coverprofile file.";
  # *************************************************************************************
  # ginkgo -r -cover -coverpkg=./... -trace -race
  # ginkgo -r -cover -race
  # ginkgo -tags daemon -r -p -race -cover -keepGoing -nodes=1 "$@"
  # ginkgo -r -p -race -cover -keepGoing -nodes=4 "$@"
  # ginkgo -r --race --randomizeAllSpecs --failOnPending --skipMeasurements
  # ginkgo -r --race --randomizeAllSpecs --failOnPending --skipMeasurements -cover -trace
  # *************************************************************************************

  # SOURCE: https://onsi.github.io/ginkgo/
  # NOTE: Ginkgo comes with a number of flags that you probably want to turn on when running in a Continuous Integration environment. The following is recommended:
  # INFO: -r will recursively find and run all spec suites in the current directory
  # INFO: --randomizeAllSpecs and --randomizeSuites will shuffle both the order in which specs within a suite run, and the order in which different suites run. This can be great for identifying test pollution. You can always rerun a given ordering later by passing the --seed flag a matching seed.
  # INFO: --failOnPending causes the test suite to fail if there are any pending tests (typically these should not be committed but should signify work in progress).
  # INFO: --cover generates .coverprofiles and coverage statistics for each test suite.
  # INFO: --trace prints out a full stack trace when failures occur. This makes debugging based on CI logs easier.
  # INFO: --race runs the tests with the race detector turned on.
  # INFO: --progress emits test progress to the GinkgoWriter. Makes identifying where failures occur a little easier.
  # ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --race --progress -skipPackage=github.com/modocache/gover/mario;
  ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --race --progress -skipPackage=mario;
  echo "[info] To collect coverages from all packages, below code snippet has been used";
  gover;
  echo "[info] Remove fixture data from gover repo, mario etc";
  PROJECT=$(go list -f "{{.ImportPath}}");
  /bin/cat gover.coverprofile | grep $PROJECT | grep "mode: atomic" > gover2.coverprofile;
  mv -f gover2.coverprofile gover.coverprofile;
  echo "[info] Finally run goveralls";
  goveralls -coverprofile=gover.coverprofile -service=travis-ci
else
    echo ""
fi



#  |2.2.3|    hyenatop in ~/dev/go_workspace/src/github.com/bossjones/go-chatbot-lab
# ± |feature-fix-coverage U:5 ?:4 ✗| → go list -f '{{ .ImportPath }}'
# github.com/bossjones/go-chatbot-lab
