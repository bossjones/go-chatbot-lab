help:
	@printf "\033[1m$$ASCICHATBOT $$NC\n"
	@printf "\033[21m\n"
	@printf "Environment Variables:\n\n"
	@printf "You need environment variables as per the docs, export these using direnv.\n"
	@printf "Basic samples are available in .envrc.sample\n"
	@printf "\n"
	@printf "=======================================\n"
	@printf "\n"
	@printf "Publish Commands:\n"
	@printf "$$BLUE make push-docker-hub$$NC              $$RED(CI)$$NC Runs \"container\", pushes image to Docker Hub, tagged based on GIT_SHA (also used by CI)\n"
	@printf "$$BLUE make push$$NC                         $$RED(CI)$$NC Runs \"container\", pushes image to Docker Hub, tagged based on GIT_SHA (also used by CI)\n"
	@printf "$$BLUE make container$$NC                    $$RED(CI)$$NC Runs release Docker build, tags image with SHA, and tags with TAG value (see below)\n"
	@printf "$$BLUE make version$$NC                      $$RED(CI)$$NC Pulls version from version.go to stdout, extension for future CI Push use\n"
	@printf "$$BLUE make build$$NC                        $$RED(CI)$$GRAY (deprecated)$$NC Proxies to push-docker-hub, used by CI pipeline\n"
	@printf "$$BLUE make build-alpine$$NC                 $$RED(CI)$$GRAY (deprecated)$$NC Compile optimized for alpine linux.\n"
	@printf "$$BLUE make package$$NC                      $$RED(CI)$$GRAY (deprecated)$$NC Build final docker image with just the go binary inside.\n"
	@printf "\n"
	@printf "Docker Build Targets (all call dev-container by default):\n"
	@printf "$$PURP make resources$$NC                    $$RED(CI)$$NC Packages resources using go-bindata, used for migrations\n"
	@printf "$$PURP make compile$$NC                      $$RED(CI)$$NC Calls install-deps, resources, bin/go-chatbot-lab\n"
	@printf "$$PURP make lint$$NC                         Runs go tool vet, gofmt, and golint on server, shared, and worker folders\n"
	@printf "$$PURP make test$$NC                         $$RED(CI)$$NC Compile and runs unit tests using go test\n"
	@printf "$$PURP make ci$$NC                           $$RED(CI)$$NC Run by external CI pipeline, calls compile and test\n"
	@printf "$$PURP make tag$$NC                          $$RED(CI)$$NC Tag image created by package with latest, git commit and version\n"
	@printf "\n"
	@printf "Non-Docker Build Targets:\n"
	@printf "  $$GRAY NB: non_docker_X is deprecated, all local dev work should be done in Docker using run_target_in_container.sh$$NC\n"
	@printf "$$ORNG make dev-container$$NC                Docker builds a dev container image based on Dockerfile-dev for local development\n"
	@printf "$$ORNG make dev-clean$$NC                    Removes dev container from local images, you must stop it first\n"
	@printf "$$ORNG make install-deps$$NC                 $$RED(CI)$$NC Runs glide install to install dependent packages for a given context\n"
	@printf "$$ORNG make bin/go-chatbot-lab$$NC           $$RED(CI)$$NC Runs go build on the FD codebase to compile binaries for a given context\n"
	@printf "$$ORNG make non_docker_resources$$NC         $$GRAY(deprecated)$$NC Runs go-bindata on resources outside of container\n"
	@printf "$$ORNG make non_docker_compile$$NC           $$GRAY(deprecated)$$NC Calls install-deps, non_docker_resources, bin/go-chatbot-lab\n"
	@printf "$$ORNG make non_docker_lint$$NC              $$GRAY(deprecated)$$NC Runs vet and go lint outside of container\n"
	@printf "$$ORNG make non_docker_test$$NC              $$GRAY(deprecated)$$NC Runs go test outside container\n"
	@printf "$$ORNG make non_docker_ci$$NC                $$GRAY(deprecated)$$NC Runs non_docker_compile and non_docker_test outside container\n"
	@printf "\n"
	@printf "Dev Tool Commands:\n"
	@printf "$$GREEN make get-deps$$NC                     Runs glide install, mostly used for ci.\n"
	@printf "$$GREEN make install-tools$$NC                Installs necessary tools for development using which\n"
	@printf "$$GREEN make check-docker-env-vars$$NC        Checks for common errors with your DOCKER_HOST and DOCKER_IP env variables\n"
	@printf "$$GREEN make dev-up$$NC                       docker-compose up -d for all flight director supporting services\n"
	@printf "$$GREEN make dev-down$$NC                     docker-compose stop/rm all flight director supporting services\n"
	@printf "$$GREEN make go-up$$NC                        docker-compose up -d for only go-chatbot-lab container\n"
	@printf "$$GREEN make go-down$$NC                      docker-compose stop for only go-chatbot-lab container\n"
	@printf "$$GREEN make dev$$NC                          make go-down && make go-up for convenience\n"
	@printf "$$GREEN make quicktest$$NC                    run full 'go test' outside of docker for quick validation, much faster than '
	@printf "\n"
	@printf "=======================================\n"
	@printf "\"make container\" target image tagging:\n"
	@printf "$$GRAY\n"
	@printf "We default to building an pushing a Docker image with a tag of "latest",because this is what CI needs.\n"
	@printf "However, a developer can locally set it to a value.\n"
	@printf "If they set it to the special value "@branch", then it gets set to the name of their git branch. E.g.:\n"
	@printf "\n"
	@printf "$ make container\n"
	@printf "  ... docker tag bossjones/go-chatbot-lab\$$sha bossjones/go-chatbot-lab:latest\n"
	@printf "\n"
	@printf "$ make TAG=foo container\n"
	@printf "  ... docker tag bossjones/go-chatbot-lab:\$$sha bossjones/go-chatbot-lab:foo\n"
	@printf "\n"
	@printf "$ make TAG=@branch container\n"
	@printf "  ... docker tag bossjones/go-chatbot-lab:\$$sha bossjones/go-chatbot-lab:customize_image_tag\n"
	@printf "$$NC\n"
